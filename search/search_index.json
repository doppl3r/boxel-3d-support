{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is the official modding documentation for Boxel 3D.</p>"},{"location":"#how-to-submit-a-bug","title":"How to Submit a Bug","text":"<p>Please create a new issue using the official Github page: https://github.com/doppl3r/boxel-3d-support/issues</p>"},{"location":"#how-to-create-a-mod","title":"How to Create a Mod","text":"<p>Information regarding how to create a mod is on the next page, \"Getting Started\".</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>Control + Shift + I (Windows)</code> - Open Inspect Element.</li> <li><code>Command + Option + I (Mac)</code> - Open Inspect Element.</li> </ul>"},{"location":"about/","title":"Hey, this page isn't done yet.","text":"<p>Go see another one!</p>"},{"location":"gettingstarted/FirstSteps/","title":"Getting started Modding Boxel 3D","text":"<p>Boxel 3D is a physics-based game built with Three.js for rendering and Matter.js for physics. Modding the game allows you to modify mechanics, add new features, or change visuals to create a custom experience.</p>"},{"location":"gettingstarted/FirstSteps/#first-steps-to-modding","title":"First Steps to Modding","text":""},{"location":"gettingstarted/FirstSteps/#1-think-of-an-idea","title":"1. Think of an Idea","text":"<p>Before diving into code, decide what you want to change. Do you want to add a new movement type, or modify physics? Having a clear goal helps guide your modifications.</p>"},{"location":"gettingstarted/FirstSteps/#2-learn-javascript","title":"2. Learn JavaScript","text":"<p>Since Boxel 3D is built using JavaScript, you need to understand its syntax and concepts, such as:  </p> <ul> <li>Variables, functions, and objects  </li> <li>Basic DOM manipulation  </li> <li>Understanding Three.js (for rendering) and Matter.js (for physics)  </li> </ul>"},{"location":"gettingstarted/FirstSteps/#3-use-a-code-editor","title":"3. Use a Code Editor","text":"<p>To write and edit JavaScript code, use a text editor like:  </p> <p>Recommended Code Editors</p> <ul> <li>Visual Studio Code \u2013 A powerful editor with extensions and debugging tools.  </li> <li>Notepad++ \u2013 A lightweight option with syntax highlighting.  </li> </ul>"},{"location":"gettingstarted/FirstSteps/#4-access-the-game-console","title":"4. Access the Game Console","text":"<p>Boxel 3D runs in a web browser, so you can use the built-in developer console to test changes.  </p>"},{"location":"gettingstarted/FirstSteps/#steps-to-open-the-console","title":"Steps to Open the Console:","text":"<ol> <li>Open the game in a browser.  </li> <li>Look at the introduction page and see \"Commands\" for steps on how to open the console.</li> <li>Navigate to the Console tab to enter JavaScript commands.  </li> </ol> <p>Once you're comfortable with these basics, you can start modifying game elements by injecting custom scripts or editing local copies of the game files.  </p> <p>\ud83d\ude80 Next Steps: Experiment with JavaScript commands in the console to manipulate game elements in real time!</p>"},{"location":"gettingstarted/Introduction/","title":"Getting started","text":"<p>This part of the documentation includes information on how to get started modding Boxel 3D.</p> <ul> <li>How to create mods</li> <li>Events in Boxel 3D</li> </ul>"},{"location":"gettingstarted/events/","title":"Event List","text":"<p>This part of the page includes lists of the events in Boxel 3D.</p>"},{"location":"gettingstarted/events/#game-events","title":"Game Events","text":""},{"location":"gettingstarted/events/#1-general-events","title":"1. General Events","text":"Event Name Detail Type Description <code>beforeSettingsClosed</code> <code>{}</code> Triggered before settings are closed. <code>closePopup</code> <code>{}</code> Fires when a popup is closed. <code>levelStart</code> <code>{ detail: Object }</code> Called when a level starts. <code>levelFinished</code> <code>{ detail: Object }</code> Triggered when a level is completed. <code>openLevelSelectorPopup</code> <code>{}</code> Fires when the level selector popup opens. <code>openPopup</code> <code>{ detail: Object }</code> Called when a popup is opened. <code>pageMounted</code> <code>{ detail: String }</code> Fired when a page is mounted. <code>popupClosed</code> <code>{}</code> Triggered when a popup is closed. <code>popupOpened</code> <code>{}</code> Fires when a popup is opened."},{"location":"gettingstarted/events/#2-player-events","title":"2. Player Events","text":"Event Name Detail Type Description <code>playerKill</code> <code>{ detail: { player: Object } }</code> Triggered when a player is killed. <code>playerRespawn</code> <code>{ detail: { player: Object } }</code> Fires when a player respawns. <code>playerRestart</code> <code>{ detail: { player: Object } }</code> Called when a player restarts."},{"location":"gettingstarted/events/#3-ui-settings-events","title":"3. UI &amp; Settings Events","text":"Event Name Detail Type Description <code>setCredit</code> <code>{ detail: { text: String } }</code> Updates credit text. <code>setMode</code> <code>{ detail: String }</code> Sets the current game mode. <code>setPage</code> <code>{ detail: String }</code> Changes the current page. <code>setSelectedObject</code> <code>{ detail: Object }</code> Sets the selected object in the UI. <code>setSelectedMode</code> <code>{ detail: String }</code> Changes the selected mode. <code>setTheme</code> <code>{ detail: String }</code> Sets the game theme. <code>settingsClosed</code> <code>{}</code> Fires when the settings menu is closed. <code>settingsOpened</code> <code>{}</code> Fires when the settings menu is opened. <code>themeSelected</code> <code>{ detail: Object }</code> Triggered when a theme is selected. <code>updateLoading</code> <code>{ detail: Object }</code> Updates the loading state. <code>updateStatsVisibility</code> <code>{}</code> Updates the visibility of stats. <p>\ud83d\ude80 Usage Example: To listen for an event in Boxel 3D, use JavaScript like this:</p>"},{"location":"gettingstarted/events/#simple-respawn-mod","title":"Simple respawn mod","text":"<pre><code>window.addEventListener(\"playerRespawn\", (event) =&gt; {\n    console.log(\"Player respawned:\", event.detail.player);\n});\n</code></pre> What does this do? <p>This mod listens to when the player respawns. If the player respawns, the console logs \"Player respawned\"</p>"}]}