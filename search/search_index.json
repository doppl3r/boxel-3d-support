{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is the official modding documentation for Boxel 3D.</p>"},{"location":"#how-to-submit-a-bug","title":"How to Submit a Bug","text":"<p>Please create a new issue using the official Github page: https://github.com/doppl3r/boxel-3d-support/issues</p>"},{"location":"#how-to-create-a-mod","title":"How to Create a Mod","text":"<p>Information regarding how to create a mod is on the next page, \"Getting Started\".</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>Control + Shift + I (Windows)</code> - Open Inspect Element.</li> <li><code>Command + Option + I (Mac)</code> - Open Inspect Element.</li> </ul>"},{"location":"about/","title":"About","text":"<p>Boxel 3D Support is developed by the Boxel 3D Community.</p>"},{"location":"double-jump/","title":"Double Jump","text":"<p>The double jump allows for jumping in mid air to get extra distance and/or height. It is most often found on platformer levels or sections of levels, but it can sometimes be used on cube levels. It is not possible with spider mode.</p>"},{"location":"double-jump/#explanation","title":"Explanation","text":"<p>The player gets the ability to jump when they go from not colliding with a hitbox to colliding with it. If you jump and then touch a block, you will regain your jump, allowing you to jump again mid-air. A simple example is when the player is on a flat surface, with a block protruding from it. The player jumps, touches the block, and regains their jump in mid-air.</p>"},{"location":"double-jump/#usage","title":"Usage","text":"<p>Here is a partial list of uses of this mechanic in levels: - Long Boi: Double jumping off one of the small blocks can be used for speedrunning - Kargoh's World: Double jumping off on of the pillars for a shortcut - Kargoh's Bobsled: Double jumping off of the end of the second ramp for a shortcut - Jericho: Double jumping off the resize blocks can be used to setup for a Corner Boost - Boxel Nomad: Double jumping off the third solid block can be used to avoid some of the ramp - Homework: Double jumping can be used for tassing the level - Mountain Climb: Double jumping can be used in a lot of places to save time - Dancing on Nothing: Double jumping is required to complete the level, and is part of the level's theme - Up, Down, and Through: This level uses an interesting variant of the double jump on the intended path - Wallclimb Ascension: Double jumping off of a textbox can be used for a shortcut - Spider #1: Double jumping at the end can be used to save time - Double Jump Hell: Double jumping is the main theme of the level</p>"},{"location":"double-jump/#history","title":"History","text":"<p>It is unknown who discovered jumping, or when. Until platformer mode, it was used only for speedrunning. After platformer mode was added into the game, Charlieee1 popularized double jumping with Dancing on Nothing. Nowadays, double jumping is used for speedrunning, skips, and occasionally as a required mechanic for a level.</p>"},{"location":"double-jump/#variants","title":"Variants","text":"<p>Here is a non-exhaustive list of double jump variants: - Simple cube/platformer double jump with momentum (Example use case: textbox skip in Wallclimb Ascension) - Stand-still platformer double jump (Example use case: recovery with spike in the underground section of Mountain Climb) - Double jump off protrusion from flat ground (Example use case: recovery in Mountain Climb) - Limited space double jump (Example use case: first jump in Dancing on Nothing) - Double jump off a pass-through block without a solid block (Example use case: second jump in Dancing on Nothing) - Double jump off a moving block with platformer (Example use case: double jump off third moving block in Boxel Nomad) - Double jump off moving block with cube (Example use case: intended route double jump in Up, Down, and Through) - Double jump off side of block from mid-air (Example use case: first jump in Double Jump Hell) - Double jump off bottom corner of block from mid-air (Example use case: shortcut in Kargoh's World) - Sideways double jump through pass-through block (Example use case: second jump in Double Jump Hell) - Double jump through reset block (Example use case: reset block double jump in Double Jump Hell) - Double jump off of a self-bouncing moving bounce block (Example use case: Kackiest Kacky #-3) - Flight with moving block (Example use case: theoretically possible TAS strat)</p>"},{"location":"double-jump/#fun-facts","title":"Fun Facts","text":"<p>Double jumping is the most well known non-trivial platformer mechanic.</p>"},{"location":"double-jump/#related-mechanics","title":"Related Mechanics","text":"<p>Here is a list of mechanics related to double jumping: - Ceiling jump - Ramp boost - Wall jump</p>"},{"location":"events/","title":"Event List","text":"<p>This part of the page includes lists of the events in Boxel 3D.</p>"},{"location":"events/#game-events","title":"Game Events","text":""},{"location":"events/#1-general-events","title":"1. General Events","text":"Event Name Detail Type Description <code>beforeSettingsClosed</code> <code>{}</code> Triggered before settings are closed. <code>closePopup</code> <code>{}</code> Fires when a popup is closed. <code>levelStart</code> <code>{ detail: Object }</code> Called when a level starts. <code>levelFinished</code> <code>{ detail: Object }</code> Triggered when a level is completed. <code>openLevelSelectorPopup</code> <code>{}</code> Fires when the level selector popup opens. <code>openPopup</code> <code>{ detail: Object }</code> Called when a popup is opened. <code>pageMounted</code> <code>{ detail: String }</code> Fired when a page is mounted. <code>popupClosed</code> <code>{}</code> Triggered when a popup is closed. <code>popupOpened</code> <code>{}</code> Fires when a popup is opened."},{"location":"events/#2-player-events","title":"2. Player Events","text":"Event Name Detail Type Description <code>playerKill</code> <code>{ detail: { player: Object } }</code> Triggered when a player is killed. <code>playerRespawn</code> <code>{ detail: { player: Object } }</code> Fires when a player respawns. <code>playerRestart</code> <code>{ detail: { player: Object } }</code> Called when a player restarts."},{"location":"events/#3-ui-settings-events","title":"3. UI &amp; Settings Events","text":"Event Name Detail Type Description <code>setCredit</code> <code>{ detail: { text: String } }</code> Updates credit text. <code>setMode</code> <code>{ detail: String }</code> Sets the current game mode. <code>setPage</code> <code>{ detail: String }</code> Changes the current page. <code>setSelectedObject</code> <code>{ detail: Object }</code> Sets the selected object in the UI. <code>setSelectedMode</code> <code>{ detail: String }</code> Changes the selected mode. <code>setTheme</code> <code>{ detail: String }</code> Sets the game theme. <code>settingsClosed</code> <code>{}</code> Fires when the settings menu is closed. <code>settingsOpened</code> <code>{}</code> Fires when the settings menu is opened. <code>themeSelected</code> <code>{ detail: Object }</code> Triggered when a theme is selected. <code>updateLoading</code> <code>{ detail: Object }</code> Updates the loading state. <code>updateStatsVisibility</code> <code>{}</code> Updates the visibility of stats. <p>\ud83d\ude80 Usage Example: To listen for an event in Boxel 3D, use JavaScript like this:</p>"},{"location":"events/#simple-respawn-mod","title":"Simple respawn mod","text":"<pre><code>window.addEventListener(\"playerRespawn\", (event) =&gt; {\n    console.log(\"Player respawned:\", event.detail.player);\n});\n</code></pre> What does this do? <p>This mod listens to when the player respawns. If the player respawns, the console logs \"Player respawned\"</p>"},{"location":"getting-started/","title":"Getting started Modding Boxel 3D","text":"<p>Boxel 3D is a physics-based game built with Three.js for rendering and Matter.js for physics. Modding the game allows you to modify mechanics, add new features, or change visuals to create a custom experience.</p>"},{"location":"getting-started/#first-steps-to-modding","title":"First Steps to Modding","text":""},{"location":"getting-started/#1-think-of-an-idea","title":"1. Think of an Idea","text":"<p>Before diving into code, decide what you want to change. Do you want to add a new movement type, or modify physics? Having a clear goal helps guide your modifications.</p>"},{"location":"getting-started/#2-learn-javascript","title":"2. Learn JavaScript","text":"<p>Since Boxel 3D is built using JavaScript, you need to understand its syntax and concepts, such as:  </p> <ul> <li>Variables, functions, and objects  </li> <li>Basic DOM manipulation  </li> <li>Understanding Three.js (for rendering) and Matter.js (for physics)  </li> </ul>"},{"location":"getting-started/#3-use-a-code-editor","title":"3. Use a Code Editor","text":"<p>To write and edit JavaScript code, use a text editor like:  </p> <p>Recommended Code Editors</p> <ul> <li>Visual Studio Code \u2013 A powerful editor with extensions and debugging tools.  </li> <li>Notepad++ \u2013 A lightweight option with syntax highlighting.  </li> </ul>"},{"location":"getting-started/#4-access-the-game-console","title":"4. Access the Game Console","text":"<p>Boxel 3D runs in a web browser, so you can use the built-in developer console to test changes.  </p>"},{"location":"getting-started/#steps-to-open-the-console","title":"Steps to Open the Console:","text":"<ol> <li>Open the game in a browser.  </li> <li>Look at the introduction page and see \"Commands\" for steps on how to open the console.</li> <li>Navigate to the Console tab to enter JavaScript commands.  </li> </ol> <p>Once you're comfortable with these basics, you can start modifying game elements by injecting custom scripts or editing local copies of the game files.  </p> <p>\ud83d\ude80 Next Steps: Experiment with JavaScript commands in the console to manipulate game elements in real time!</p>"},{"location":"level-types/","title":"Types of Boxel 3d Levels","text":"<ul> <li>Basic cube (1-1)<ul> <li>The oldest style of level building</li> <li>Very competitive</li> <li>Very difficult to build right</li> </ul> </li> <li>Speed cube (Faster Than a Bullet)<ul> <li>Uncommon style of level</li> <li>Fun to play</li> <li>Tedious to create</li> </ul> </li> <li>Precision spider (Damp Caves)<ul> <li>Frequently requires lots of clicks</li> <li>Not always in a straight line, but moving around obstacles and through tight gaps</li> </ul> </li> <li>Tech spider (Second part of precision spider)<ul> <li>Requires expert maintaining of speed at the highest level</li> <li>Not very fast</li> </ul> </li> <li>Speed spider (Spider cave)<ul> <li>Very fast spider level</li> <li>Build up speed over time as the level goes on</li> <li>Maintain speed for faster times</li> </ul> </li> <li>GD Style (Futuristic light)<ul> <li>Built to a geometry dash player's skillset</li> <li>Lots of very precise clicks</li> <li>Usually not much room for speedrunning</li> <li>Usually built in one line</li> </ul> </li> <li>Kacky (Kackiest Kacky #-3)<ul> <li>Mental challenge</li> <li>Soul crushing</li> <li>Shows off unique game mechanic/glitch</li> <li>Very difficult</li> </ul> </li> <li>Puzzle (Puzzle #6: Match-up)<ul> <li>The gameplay lies in finding out how to beat the level</li> <li>Usually does not require much mechanical skill</li> </ul> </li> <li>Precision platformer (Only Up)<ul> <li>Requires precise platformer movement, usually while travelling upwards</li> <li>Levels are very likely to be infuriating or annoying due to slippery platformer physics</li> </ul> </li> <li>Basic platformer (Platforming Fun)<ul> <li>Just a regular platformer level</li> </ul> </li> <li>Timed platformer (Boxel Nomad)<ul> <li>Requires platforming through/with moving/bouncing blocks</li> </ul> </li> <li>Double jump platformer (Double Jump Hell)<ul> <li>Frequently has not that many blocks</li> <li>Requires using double jumping</li> <li>Very hard for new players to get into</li> </ul> </li> <li>Trial (Mountain Climb)<ul> <li>Very long map</li> <li>Showcases a lot of different gameplay</li> <li>Has checkpoints to separate different sections</li> <li>Very uncommon map style</li> </ul> </li> <li>RNG (The Bonce House)<ul> <li>Gameplay relies of the non-deterministic nature of boxel 3d and/or a chaotic system mixed with inaccurate human inputs</li> <li>Very controversial</li> <li>Type of meme level</li> </ul> </li> <li>Meme (The Bonce House)<ul> <li>A level not meant to be fun to play, or high quality</li> <li>Meant for laughs and giggles</li> </ul> </li> <li>Gimmick (Tennis)<ul> <li>A level focused on neat little strange, creative things in game the level creator found</li> <li>Not meant to be super high quality</li> <li>Doesn't have to be difficult</li> <li>These levels are very common as players experiment and innovate constantly</li> </ul> </li> <li>Story (World Hunger)<ul> <li>A level focused on story rather than gameplay</li> <li>Story typically conveyed through text boxes</li> </ul> </li> <li>Highly decorated (Prelude)<ul> <li>A level that focuses heavily on decoration</li> </ul> </li> <li>Auto (auto)<ul> <li>The level completes itself without player intervention</li> <li>Hard to make cool levels of this type because of non-deterministic physics</li> </ul> </li> <li>RPG (INOCH)<ul> <li>Gameplay mixed with story</li> <li>No completed level of this type yet</li> </ul> </li> <li>Modded (Dash platforming)<ul> <li>A level that requires a mod (or multiple)</li> <li>Going beyond the vanilla game</li> </ul> </li> <li>Collab (Creation roulette)<ul> <li>A level built by multiple people</li> </ul> </li> <li>In game level (!__kf)<ul> <li>The elite levels (some are actually pretty garbage)</li> <li>Considered an honour to have a level of this type</li> <li>Highly sought after but not in the control of the level builder (any more, now that the level voting system has been implemented)</li> </ul> </li> <li>Hybrid (Strawberry Jam)<ul> <li>A level that fits into multiple of the above categories</li> <li>Ie. Strawberry Jam is basic cube, speed cube, basic platforming, decorated, and in game</li> </ul> </li> </ul>"}]}